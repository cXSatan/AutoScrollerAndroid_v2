package com.example.autoscroller

import com.example.autoscroller.util.NotificationHelper
import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Intent
import android.graphics.PixelFormat
import android.graphics.drawable.GradientDrawable
import android.os.Build
import android.os.IBinder
import android.provider.Settings
import android.view.Gravity
import android.view.LayoutInflater
import android.view.MotionEvent
import android.view.View
import android.view.WindowManager
import android.widget.TextView

class OverlayIndicatorService : Service() {
    private lateinit var wm: WindowManager
    private var bubble: View? = null
    private var running = false

    override fun onBind(intent: Intent?): IBinder? = null

    override fun onCreate() {
        super.onCreate()
        startFg()
        showBubble()
    }

    override fun onDestroy() {
        bubble?.let { wm.removeView(it) }
        bubble = null
        super.onDestroy()
    }

        private fun startFg(isRunning: Boolean) {
        NotificationHelper.ensureChannel(this)
        val notification: Notification = NotificationHelper.buildStatusNotification(this, isRunning)
        startForeground(NOTIF_ID, notification)
    }
        val n: Notification = Notification.Builder(this, channelId)
            .setContentTitle("AutoScroller")
            .setContentText("Overlay indicator")
            .setSmallIcon(android.R.drawable.presence_online)
            .build()
        startForeground(2, n)
    }

    private fun showBubble() {
        if (!Settings.canDrawOverlays(this)) return

        wm = getSystemService(WINDOW_SERVICE) as WindowManager
        bubble = LayoutInflater.from(this).inflate(R.layout.overlay_indicator, null)

        // circular background programmatically
        val tv = bubble!!.findViewById<TextView>(R.id.indicator)
        tv.background = GradientDrawable().apply {
            shape = GradientDrawable.OVAL
            setColor(0xAA000000.toInt()) // semi-dark
        }

        updateUi() // set initial alpha + icon

        val type = if (Build.VERSION.SDK_INT >= 26)
            WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY
        else
            WindowManager.LayoutParams.TYPE_PHONE

        val params = WindowManager.LayoutParams(
            WindowManager.LayoutParams.WRAP_CONTENT,
            WindowManager.LayoutParams.WRAP_CONTENT,
            type,
            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or
                WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,
            PixelFormat.TRANSLUCENT
        ).apply {
            gravity = Gravity.TOP or Gravity.START
            x = 50
            y = 250
        }

        wm.addView(bubble, params)

        // tap to toggle state
        tv.setOnClickListener {
            running = !running
            updateUi()
            // later: send broadcast to the AccessibilityService to start/stop scrolling
        }

        // drag to move
        bubble!!.setOnTouchListener(object : View.OnTouchListener {
            var startX = 0; var startY = 0; var touchX = 0f; var touchY = 0f
            override fun onTouch(v: View?, event: MotionEvent): Boolean {
                when (event.actionMasked) {
                    MotionEvent.ACTION_DOWN -> {
                        startX = params.x; startY = params.y
                        touchX = event.rawX; touchY = event.rawY
                        return false
                    }
                    MotionEvent.ACTION_MOVE -> {
                        params.x = startX + (event.rawX - touchX).toInt()
                        params.y = startY + (event.rawY - touchY).toInt()
                        wm.updateViewLayout(bubble, params)
                        return true
                    }
                }
                return false
            }
        })
    }

    private fun updateUi() {
        val tv = bubble?.findViewById<TextView>(R.id.indicator) ?: return
        tv.text = if (running) "⏸" else "▶"
        // your spec: "fades to almost transparent when running"
        bubble?.alpha = if (running) 0.15f else 0.40f
    }
}
